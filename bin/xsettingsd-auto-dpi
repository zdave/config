#!/usr/bin/env python3

import Xlib.display
import Xlib.ext
import contextlib
import pathlib
import shutil
import signal
import subprocess
import sys
import tempfile

def dpi_from_size(pixels, mms):
    # 25.4mm in an inch
    return round((pixels / mms) * 25.4)

def dpi_from_screen(screen):
    return dpi_from_size(screen.width_in_pixels, screen.width_in_mms)

def dpis():
    with contextlib.closing(Xlib.display.Display()) as display:
        assert display.has_extension('RANDR')
        root = display.screen().root

        root.xrandr_select_input(Xlib.ext.randr.RRScreenChangeNotifyMask)

        # The screen size in mm is only sent at connection time and in
        # ScreenChangeNotify events; it cannot be freely queried AFAIK. To
        # avoid potentially missing a screen size change here, first sync to
        # ensure the xrandr_select_input() has taken effect at the server, then
        # open another connection to get the screen size.
        display.sync()
        with contextlib.closing(Xlib.display.Display()) as second_display:
            yield dpi_from_screen(second_display.screen())

        while True:
            e = display.next_event()
            if e.__class__.__name__ == Xlib.ext.randr.ScreenChangeNotify.__name__:
                yield dpi_from_size(e.width_in_pixels, e.width_in_millimeters)

def unique(xs):
    prev = None
    for x in xs:
        if x != prev:
            yield x
            prev = x

def write_config(path, dpi):
    with path.open('w') as wf:
        print('Xft/DPI %d' % (dpi * 1024), file=wf)
        try:
            with (pathlib.Path.home() / '.xsettingsd').open() as rf:
                shutil.copyfileobj(rf, wf)
        except FileNotFoundError:
            pass

def main():
    signal.signal(signal.SIGTERM, lambda *args: sys.exit(0))

    with contextlib.ExitStack() as stack:
        dir = stack.enter_context(tempfile.TemporaryDirectory())
        config_path = pathlib.Path(dir, 'config')
        new_config_path = pathlib.Path(dir, 'new-config')

        p = None
        try:
            for dpi in unique(dpis()):
                print('%d DPI' % dpi, file=sys.stderr, flush=True)
                write_config(new_config_path, dpi)
                new_config_path.rename(config_path)
                if p is None:
                    cmd = ['xsettingsd', '--config=%s' % config_path]
                    p = stack.enter_context(subprocess.Popen(cmd))
                else:
                    p.send_signal(signal.SIGHUP)
        finally:
            if p is not None:
                p.terminate()

main()
