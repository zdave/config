#!/usr/bin/env python3

import Xlib.display
import Xlib.ext
import contextlib
import os
import random
import shlex
import subprocess
import sys

def images_under(root):
    for dir, dirnames, filenames in os.walk(root):
        for filename in filenames:
            if os.path.splitext(filename)[1] in {'.jpg', '.png'}:
                yield os.path.join(dir, filename)

def get_wallpapers_by_size():
    root = os.path.join(os.environ['HOME'], 'wallpapers')
    for name in os.listdir(root):
        path = os.path.join(root, name)
        if ('x' in name) and os.path.isdir(path):
            w, h = name.split('x', 1)
            try:
                w = int(w)
                h = int(h)
            except ValueError:
                continue
            wallpapers = list(images_under(path))
            if wallpapers:
                yield (w, h), wallpapers

def ratio_score(w1, h1, w2, h2):
    r1 = w1 / h1
    r2 = w2 / h2
    return min(r1, r2) / max(r1, r2)

def size_score(w, h):
    return w * h

def best_wallpaper_size_for(wallpaper_sizes, screen_size):
    if screen_size in wallpaper_sizes:
        return screen_size
    def score(wallpaper_size):
        return (ratio_score(*wallpaper_size, *screen_size), size_score(*wallpaper_size))
    return max(wallpaper_sizes, key=score)

def feh_args(screen_sizes, wallpapers_by_size):
    yield '--bg-max'
    yield '--no-fehbg'
    yield '--'

    for screen_size in screen_sizes:
        wallpaper_size = best_wallpaper_size_for(
            wallpapers_by_size, (screen_size.width, screen_size.height))
        yield random.choice(wallpapers_by_size[wallpaper_size])

def update(root):
    screen_sizes = [root.xinerama_get_screen_size(i)
        for i in range(root.xinerama_get_screen_count().screen_count)]
    if not screen_sizes:
        return

    wallpapers_by_size = dict(get_wallpapers_by_size())
    if not wallpapers_by_size:
        raise Exception('No wallpapers!')

    cmd = ['feh'] + list(feh_args(screen_sizes, wallpapers_by_size))
    print(' '.join(shlex.quote(arg) for arg in cmd), file=sys.stderr, flush=True)
    subprocess.run(cmd, check=True)

def try_update(root):
    try:
        update(root)
    except Exception as e:
        print(e, file=sys.stderr, flush=True)

def main():
    with contextlib.closing(Xlib.display.Display()) as display:
        assert display.has_extension('RANDR')
        assert display.has_extension('XINERAMA')
        root = display.screen().root

        root.xrandr_select_input(Xlib.ext.randr.RRCrtcChangeNotifyMask)
        try_update(root)
        while True:
            e = display.next_event()
            if e.__class__.__name__ == Xlib.ext.randr.CrtcChangeNotify.__name__:
                try_update(root)

main()
